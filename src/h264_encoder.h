//
//  h264_encoder.h
//  rtc
//
//  Created by Mr.Panda on 2023/3/10.
//

#ifndef LIBRTC_H264_DECODER_H
#define LIBRTC_H264_DECODER_H
#pragma once

#include "common_video/h264/h264_bitstream_parser.h"
#include "api/create_peerconnection_factory.h"
#include "common_video/h264/h264_common.h"
#include "h264.h"

#include <optional>
#include <string>

extern "C"
{
#include "libavcodec/avcodec.h"
}

class H264Encoder
	: public webrtc::VideoEncoder
{
public:
	H264Encoder(const webrtc::SdpVideoFormat& format);
	~H264Encoder();

	static std::vector<webrtc::SdpVideoFormat> GetSupportedFormats();
	static std::unique_ptr<H264Encoder> Create(const webrtc::SdpVideoFormat& format);

	// Initialize the encoder with the information from the codecSettings
	//
	// Input:
	//          - codec_settings    : Codec settings
	//          - settings          : Settings affecting the encoding itself.
	// Input for deprecated version:
	//          - number_of_cores   : Number of cores available for the encoder
	//          - max_payload_size  : The maximum size each payload is allowed
	//                                to have. Usually MTU - overhead.
	//
	// Return value                  : Set bit rate if OK
	//                                 <0 - Errors:
	//                                  WEBRTC_VIDEO_CODEC_ERR_PARAMETER
	//                                  WEBRTC_VIDEO_CODEC_ERR_SIZE
	//                                  WEBRTC_VIDEO_CODEC_MEMORY
	//                                  WEBRTC_VIDEO_CODEC_ERROR
	int InitEncode(const webrtc::VideoCodec* codec_settings, const Settings& settings);

	// Register an encode complete callback object.
	//
	// Input:
	//          - callback         : Callback object which handles encoded images.
	//
	// Return value                : WEBRTC_VIDEO_CODEC_OK if OK, < 0 otherwise.
	int32_t RegisterEncodeCompleteCallback(webrtc::EncodedImageCallback* callback);

	// Encode an image (as a part of a video stream). The encoded image
	// will be returned to the user through the encode complete callback.
	//
	// Input:
	//          - frame             : Image to be encoded
	//          - frame_types       : Frame type to be generated by the encoder.
	//
	// Return value                 : WEBRTC_VIDEO_CODEC_OK if OK
	//                                <0 - Errors:
	//                                  WEBRTC_VIDEO_CODEC_ERR_PARAMETER
	//                                  WEBRTC_VIDEO_CODEC_MEMORY
	//                                  WEBRTC_VIDEO_CODEC_ERROR
	int32_t Encode(const webrtc::VideoFrame& frame, const std::vector<webrtc::VideoFrameType>* frame_types);

	// Sets rate control parameters: bitrate, framerate, etc. These settings are
	// instantaneous (i.e. not moving averages) and should apply from now until
	// the next call to SetRates().
	void SetRates(const webrtc::VideoEncoder::RateControlParameters& parameters);

	// Returns meta-data about the encoder, such as implementation name.
	// The output of this method may change during runtime. For instance if a
	// hardware encoder fails, it may fall back to doing software encoding using
	// an implementation with different characteristics.
	EncoderInfo GetEncoderInfo() const;

	// Free encoder memory.
	// Return value                : WEBRTC_VIDEO_CODEC_OK if OK, < 0 otherwise.
	int32_t Release();
private:
	int _ReadPacket(webrtc::VideoFrameType frame_type, const webrtc::VideoFrame& frame);
	int _OnFrame(webrtc::VideoFrameType frame_type);

	std::optional<webrtc::EncodedImageCallback*> _callback = std::nullopt;
	
	webrtc::H264BitstreamParser _h264_bitstream_parser;
	webrtc::CodecSpecificInfo _codec_specific;
	webrtc::EncodedImage _image;
	std::string _codec_name;

	const AVCodec* _codec = nullptr;
	AVCodecContext* _ctx = nullptr;
	AVPacket* _packet = nullptr;
	AVFrame* _frame = nullptr;
	size_t _frame_num = 0;
};

#endif // LIBRTC_H264_DECODER_H
